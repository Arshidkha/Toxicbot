import logging
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, CallbackContext
import openai
import wikipedia
from langdetect import detect
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import CommandHandler, CallbackContext

# тЬЕ Support Group Link
SUPPORT_GROUP_LINK = "https://t.me/+H4TLyLB0TBM0NzY9"

async def support(update: Update, context: CallbackContext):
    keyboard = [[InlineKeyboardButton("ЁЯФЧ Join Support Group", url=SUPPORT_GROUP_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text("тЪб **Need Help? Join our Support Group!**", reply_markup=reply_markup)

# ЁЯФ╣ OpenAI API Key Set рдХрд░рдирд╛
openai.api_key = OPENAI_KEY

# ЁЯЫа **Logging рд╕реЗрдЯрдЕрдк**
logging.basicConfig(format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO)
logger = logging.getLogger(__name__)

# ЁЯМР **Dynamic Language Detection**
def detect_language(text):
    try:
        return detect(text)
    except Exception:
        return "en"

# ЁЯФе **Smart Reply System**
def smart_reply(update: Update, context: CallbackContext) -> None:
    text = update.message.text
    lang = detect_language(text)
    
    if "arshid" in text.lower():  # ЁЯСС Owner Toxic (Arshid) рдХрд╛ рдирд╛рдо рдЖрдпрд╛
        response = f"ЁЯФеЁЯФе {update.message.from_user.first_name}, Arshid рдХреЗ рдмрд╛рд░реЗ рдореЗрдВ рд╕рд╣реА рдмреЛрд▓реЛ!"
    else:
        response = "ЁЯдЦ рдореИрдВ рдпрд╣рд╛рдБ рд╣реВрдБ! рдХреНрдпрд╛ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдБ?"

    update.message.reply_text(response)

# тЬЕ **Start Command**
async def start(update: Update, context: CallbackContext) -> None:
    keyboard = [[InlineKeyboardButton("ЁЯСе Join Group", url=GROUP_LINK)]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "ЁЯСЛ **Welcome to Toxic Bot!**\n\n"
        "ЁЯФе рдореИрдВ рдЖрдкрдХреЗ рд▓рд┐рдП рд╣рд░ рд╕рд╡рд╛рд▓ рдХрд╛ рдЬрд╡рд╛рдм рджреЗ рд╕рдХрддрд╛ рд╣реВрдБред\n"
        "тД╣я╕П **Commands:** /help, /group, /ask\n"
        "ЁЯУМ **Owner:** Arshid\n\n"
        "ЁЯСЙ **Join Group for More!**",
        reply_markup=reply_markup
)
  # ЁЯЫа **Help Command**
async def help_command(update: Update, context: CallbackContext) -> None:
    await update.message.reply_text(
        "**ЁЯУМ Available Commands:**\n\n"
        "ЁЯФ╣ /group - рд╕рднреА рдЧреНрд░реБрдк рдореИрдиреЗрдЬрдореЗрдВрдЯ рдХрдорд╛рдВрдбреНрд╕\n"
        "ЁЯФ╣ /wiki <query> - рд╡рд┐рдХрд┐рдкреАрдбрд┐рдпрд╛ рд╕рд░реНрдЪ\n"
        "ЁЯФ╣ /ask <question> - AI рд╕реЗ рд╕рд╡рд╛рд▓ рдкреВрдЫреЗрдВ\n"
        "ЁЯФ╣ /mentionall - рд╕рднреА рд╕рджрд╕реНрдпреЛрдВ рдХреЛ рдЯреИрдЧ рдХрд░реЗрдВ\n"
        "ЁЯФ╣ /afk <reason> - AFK рдореЛрдб рд╕реЗрдЯ рдХрд░реЗрдВ\n"
        "ЁЯФ╣ /info <username> - рдХрд┐рд╕реА рднреА рдпреВрдЬрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рд▓реЗрдВ"
    )

# ЁЯМР **Wikipedia Search**
async def wiki_command(update: Update, context: CallbackContext) -> None:
    query = " ".join(context.args)
    if not query:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ /wiki рдХреЗ рдмрд╛рдж рдПрдХ рд╡рд┐рд╖рдп рд▓рд┐рдЦреЗрдВред")
        return

    try:
        summary = wikipedia.summary(query, sentences=2, auto_suggest=False)
        await update.message.reply_text(f"ЁЯУЪ **Wikipedia Result for:** {query}\n\n{summary}")
    except:
        await update.message.reply_text("тЭМ рдХреЛрдИ рдкрд░рд┐рдгрд╛рдо рдирд╣реАрдВ рдорд┐рд▓рд╛ред")

# ЁЯЪА **AI Chat System (Ask Command)**
async def ask_command(update: Update, context: CallbackContext) -> None:
    question = " ".join(context.args)
    if not question:
        await update.message.reply_text("тЭМ рдХреГрдкрдпрд╛ /ask рдХреЗ рдмрд╛рдж рдПрдХ рд╕рд╡рд╛рд▓ рд▓рд┐рдЦреЗрдВред")
        return

    try:
        response = openai.ChatCompletion.create(
            model="gpt-3.5-turbo",
            messages=[{"role": "user", "content": question}]
        )
        reply = response["choices"][0]["message"]["content"].strip()
        await update.message.reply_text(f"ЁЯдЦ **AI Response:**\n{reply}")
    except Exception as e:
        await update.message.reply_text("тЪая╕П AI рд╕реЗ рдЬрд╡рд╛рдм рд▓рд╛рдиреЗ рдореЗрдВ рджрд┐рдХреНрдХрдд рд╣реЛ рд░рд╣реА рд╣реИред")

# тЬЕ **Main Function**
def main():
    app = Application.builder().token(BOT_TOKEN).build()

    # ЁЯФ╣ Commands
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("wiki", wiki_command))
    app.add_handler(CommandHandler("ask", ask_command))

    # ЁЯФ╣ Message Handlers
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, smart_reply))

    # ЁЯФе **Start Bot**
    print("ЁЯЪА Toxic Bot is Running!")
    app.run_polling()

if __name__ == "__main__":
    main()
